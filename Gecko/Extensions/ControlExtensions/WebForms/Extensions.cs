using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections.Generic;
using System;
using System.Linq;
using Gecko.Extensions.StringExtensions;
using Gecko.Extensions.CollectionExtensions;

namespace Gecko.Extensions.ControlExtensions.WebForms
{
	public static class Extensions
	{
		public static T FindControl<T>(this Control root) where T : Control
		{
			return root.FindControl<T>(null, false);
		}

		public static T FindControl<T>(this Control root, string id) where T : Control
		{
			return root.FindControl<T>(id, false);
		}

		public static T FindControl<T>(this Control root, bool useRecursion) where T : Control
		{
			return root.FindControl<T>(null, useRecursion);
		}

		public static T FindControl<T>(this Control root, string id, bool useRecursion) where T : Control
		{
			T ret = default(T);
			if (root.GetType() == typeof(T) && (id == null || root.ID == id))
				ret = (T) root;
			else
				foreach (Control c in root.Controls)
					if (c.GetType() == typeof(T) && (id == null || c.ID == id))
					{
						ret = (T) c;
						break;
					}


					else if (useRecursion)
					{
						ret = c.FindControl<T>(id, useRecursion);
						if (ret != null)
							break;
					}
			return ret;
		}

		public static int FindCellIndex(this TableRow row, string cellName)
		{
			return row.Cells.OfType<TableCell>().FindIndex<TableCell>(cell => cell.Text.Equals(cellName));
		}

		public static void LeftMostAutoGeneratedColumns(this GridViewRow row, GridView parent, int beforeColumn)
		{
			if (row.Cells.Count > beforeColumn)
			{
				List<TableCell> columns = new List<TableCell>();
				for (int i = 0; i < parent.Columns.Count; i++)
				{
					TableCell cell = row.Cells[beforeColumn];
					row.Cells.Remove(cell);
					columns.Add(cell);
				}
				row.Cells.AddRange(columns.ToArray());
			}
		}

		public static void InsertAutoGeneratedColumns(this GridViewRow row, GridView parent, int From, int Index)
		{
			int To = row.Cells.Count - parent.Columns.Count;
			List<TableCell> cells = new List<TableCell>();
			foreach (TableCell cell in row.Cells)
				cells.Add(cell);
			cells = cells.MoveTo(From, To, Index).ToList();
			row.Cells.Clear();
			foreach (TableCell cell in cells)
				row.Cells.Add(cell);
			cells = null;
		}

		public static void SummaryRow(this GridViewRow row, string SummaryDescription)
		{
			int count = row.Cells.Count;
			for (int i = count - 1; i > 0; i--)
				row.Cells.RemoveAt(i);
			row.Cells[0].ColumnSpan = count;
			row.Cells[0].Text = SummaryDescription;
		}

		public static void RenameHeader(this GridViewRow row, string @from, string to)
		{
			if (row.RowType != DataControlRowType.Header)
				throw new Exception("Not an Header Row");
			foreach (TableCell cell in row.Cells)
				if (cell.Text.Equals(@from))
				{
					cell.Text = to;
					break;
				}
		}

		public static string GetDoPostBackCallBack(this Control c)
		{
			return "__doPostBack('{0}', '');".FormatWith(c.UniqueID);
		}

		public static void ForceClickPostBack(this Button b)
		{
			b.OnClientClick = b.GetDoPostBackCallBack();
		}

		public static void ForceClickPostBack(this LinkButton b)
		{
			b.OnClientClick = b.GetDoPostBackCallBack();
		}

		public static void ForceClickPostBack(this ImageButton b)
		{
			b.OnClientClick = b.GetDoPostBackCallBack();
		}
	}
}
